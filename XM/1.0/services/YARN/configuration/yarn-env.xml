<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
<configuration supports_adding_forbidden="true">
  <property require-input="true">
    <name>download_url</name>
    <value>http://yum.example.com/hadoop/7/hadoop-3.0.0.tar.gz</value>
    <description>下载路径(只支持.tar.gz)</description>
  </property>
  <property require-input="true">
    <name>install_dir</name>
    <value>/opt/hadoop</value>
    <description>安装目录</description>
  </property>

  <property>
    <name>yarn_log_dir_prefix</name>
    <value>/var/log/hadoop-yarn</value>
    <display-name>YARN Log Dir Prefix</display-name>
    <description>YARN Log Dir Prefix</description>
    <value-attributes>
      <type>directory</type>
      <overridable>false</overridable>
    </value-attributes>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>yarn_pid_dir_prefix</name>
    <value>/var/run/hadoop-yarn</value>
    <display-name>YARN PID Dir Prefix</display-name>
    <description>YARN PID Dir Prefix</description>
    <value-attributes>
      <type>directory</type>
      <overridable>false</overridable>
      <editable-only-at-install>true</editable-only-at-install>
    </value-attributes>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>yarn_user</name>
    <display-name>Yarn User</display-name>
    <value>yarn</value>
    <property-type>USER</property-type>
    <description>YARN User</description>
    <value-attributes>
      <type>user</type>
      <overridable>false</overridable>
    </value-attributes>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>yarn_heapsize</name>
    <value>8192</value>
    <display-name>YARN Java heap size</display-name>
    <description>Max heapsize for all YARN components using a numerical value in the scale of MB</description>
    <value-attributes>
      <type>int</type>
      <unit>MB</unit>
    </value-attributes>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>resourcemanager_heapsize</name>
    <value>8192</value>
    <display-name>ResourceManager Java heap size</display-name>
    <description>Max heapsize for ResourceManager using a numerical value in the scale of MB</description>
    <value-attributes>
      <type>int</type>
      <overridable>false</overridable>
      <unit>MB</unit>
    </value-attributes>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>nodemanager_heapsize</name>
    <value>8192</value>
    <display-name>NodeManager Java heap size</display-name>
    <description>Max heapsize for NodeManager using a numerical value in the scale of MB</description>
    <value-attributes>
      <type>int</type>
      <unit>MB</unit>
    </value-attributes>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>min_user_id</name>
    <value>1000</value>
    <display-name>Minimum user ID for submitting job</display-name>
    <description>Set to 0 to disallow root from submitting jobs. Set to 1000 to disallow all superusers from submitting jobs</description>
    <value-attributes>
      <type>int</type>
    </value-attributes>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>yarn_user_nofile_limit</name>
    <value>1280000</value>
    <description>Max open files limit setting for YARN user.</description>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>yarn_user_nproc_limit</name>
    <value>65536</value>
    <description>Max number of processes limit setting for YARN user.</description>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>apptimelineserver_heapsize</name>
    <value>1024</value>
    <display-name>AppTimelineServer Java heap size</display-name>
    <description>Max heapsize for AppTimelineServer using a numerical value in the scale of MB</description>
    <value-attributes>
      <overridable>false</overridable>
      <unit>MB</unit>
      <type>int</type>
    </value-attributes>
    <on-ambari-upgrade add="true"/>
  </property>


  <!-- yarn-env.sh -->
  <property>
    <name>content</name>
    <display-name>yarn-env template</display-name>
    <description>This is the jinja template for yarn-env.sh file</description>
    <value>
export HADOOP_YARN_HOME={{hadoop_yarn_home}}
export YARN_LOG_DIR={{yarn_log_dir_prefix}}/$USER
export YARN_PID_DIR={{yarn_pid_dir_prefix}}/$USER
export HADOOP_LIBEXEC_DIR={{hadoop_libexec_dir}}
export JAVA_HOME={{java64_home}}
export JAVA_LIBRARY_PATH="${JAVA_LIBRARY_PATH}:{{hadoop_java_io_tmpdir}}"

# We need to add the EWMA appender for the yarn daemons only;
# however, YARN_ROOT_LOGGER is shared by the yarn client and the
# daemons. This is restrict the EWMA appender to daemons only.
INVOKER="${0##*/}"
if [ "$INVOKER" == "yarn-daemon.sh" ]; then
export YARN_ROOT_LOGGER=${YARN_ROOT_LOGGER:-INFO,EWMA,RFA}
fi

# User for YARN daemons
export HADOOP_YARN_USER=${HADOOP_YARN_USER:-yarn}

# resolve links - $0 may be a softlink
export YARN_CONF_DIR="${YARN_CONF_DIR:-$HADOOP_YARN_HOME/conf}"

# some Java parameters
# export JAVA_HOME=/home/y/libexec/jdk1.6.0/
if [ "$JAVA_HOME" != "" ]; then
#echo "run java in $JAVA_HOME"
JAVA_HOME=$JAVA_HOME
fi

if [ "$JAVA_HOME" = "" ]; then
echo "Error: JAVA_HOME is not set."
exit 1
fi

JAVA=$JAVA_HOME/bin/java
JAVA_HEAP_MAX=-Xmx1000m

# For setting YARN specific HEAP sizes please use this
# Parameter and set appropriately
YARN_HEAPSIZE={{yarn_heapsize}}

# check envvars which might override default args
if [ "$YARN_HEAPSIZE" != "" ]; then
JAVA_HEAP_MAX="-Xmx""$YARN_HEAPSIZE""m"
fi
# Resource Manager specific parameters

# Specify the max Heapsize for the ResourceManager using a numerical value
# in the scale of MB. For example, to specify an jvm option of -Xmx1000m, set
# the value to 1000.
# This value will be overridden by an Xmx setting specified in either YARN_OPTS
# and/or YARN_RESOURCEMANAGER_OPTS.
# If not specified, the default value will be picked from either YARN_HEAPMAX
# or JAVA_HEAP_MAX with YARN_HEAPMAX as the preferred option of the two.
export YARN_RESOURCEMANAGER_HEAPSIZE={{resourcemanager_heapsize}}

# Specify the JVM options to be used when starting the ResourceManager.
# These options will be appended to the options specified as YARN_OPTS
# and therefore may override any similar flags set in YARN_OPTS
#export YARN_RESOURCEMANAGER_OPTS=
export YARN_RESOURCEMANAGER_OPTS="-server -XX:ParallelGCThreads=8 -XX:+UseConcMarkSweepGC -XX:ErrorFile={{yarn_log_dir_prefix}}/$USER/rm_err_pid%p.log -Xloggc:{{yarn_log_dir_prefix}}/$USER/gc.log-`date +'%Y%m%d%H%M'` -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:CMSInitiatingOccupancyFraction=70 -XX:+UseCMSInitiatingOccupancyOnly -Xms{{resourcemanager_heapsize}}m -Xmx{{resourcemanager_heapsize}}m -XX:NewSize=8192m -XX:MaxNewSize=8192m -Dyarn.server.resourcemanager.appsummary.logger=INFO,RMSUMMARY ${YARN_RESOURCEMANAGER_OPTS}"

# Node Manager specific parameters

# Specify the max Heapsize for the NodeManager using a numerical value
# in the scale of MB. For example, to specify an jvm option of -Xmx1000m, set
# the value to 1000.
# This value will be overridden by an Xmx setting specified in either YARN_OPTS
# and/or YARN_NODEMANAGER_OPTS.
# If not specified, the default value will be picked from either YARN_HEAPMAX
# or JAVA_HEAP_MAX with YARN_HEAPMAX as the preferred option of the two.
export YARN_NODEMANAGER_HEAPSIZE={{nodemanager_heapsize}}

# Specify the max Heapsize for the timeline server using a numerical value
# in the scale of MB. For example, to specify an jvm option of -Xmx1000m, set
# the value to 1024.
# This value will be overridden by an Xmx setting specified in either YARN_OPTS
# and/or YARN_TIMELINESERVER_OPTS.
# If not specified, the default value will be picked from either YARN_HEAPMAX
# or JAVA_HEAP_MAX with YARN_HEAPMAX as the preferred option of the two.
export YARN_TIMELINESERVER_HEAPSIZE={{apptimelineserver_heapsize}}
export YARN_TIMELINESERVER_OPTS="-server -XX:ParallelGCThreads=8 -XX:+UseConcMarkSweepGC -XX:ErrorFile={{yarn_log_dir_prefix}}/$USER/timelineserver_err_pid%p.log -Xloggc:{{yarn_log_dir_prefix}}/$USER/timelineserver-gc.log-`date +'%Y%m%d%H%M'` -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:CMSInitiatingOccupancyFraction=70 -XX:+UseCMSInitiatingOccupancyOnly -Xms{{apptimelineserver_heapsize}}m -Xmx{{apptimelineserver_heapsize}}m -XX:NewSize=4096m -XX:MaxNewSize=4096m ${YARN_TIMELINESERVER_OPTS}"

# Specify the JVM options to be used when starting the NodeManager.
# These options will be appended to the options specified as YARN_OPTS
# and therefore may override any similar flags set in YARN_OPTS
#export YARN_NODEMANAGER_OPTS=
export YARN_NODEMANAGER_OPTS="-server -XX:CMSInitiatingOccupancyFraction=70 -XX:+UseCMSInitiatingOccupancyOnly -XX:ParallelGCThreads=4 -XX:+UseConcMarkSweepGC -XX:ErrorFile={{yarn_log_dir_prefix}}/$USER/nm_err_pid%p.log -Xloggc:{{yarn_log_dir_prefix}}/$USER/gc.log-`date +'%Y%m%d%H%M'` -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -Xms{{nodemanager_heapsize}}m -Xmx{{nodemanager_heapsize}}m ${YARN_NODEMANAGER_OPTS}"
# so that filenames w/ spaces are handled correctly in loops below
IFS=


# default log directory and file
if [ "$YARN_LOG_DIR" = "" ]; then
YARN_LOG_DIR="$HADOOP_YARN_HOME/logs"
fi
if [ "$YARN_LOGFILE" = "" ]; then
YARN_LOGFILE='yarn.log'
fi

# default policy file for service-level authorization
if [ "$YARN_POLICYFILE" = "" ]; then
YARN_POLICYFILE="hadoop-policy.xml"
fi

# restore ordinary behaviour
unset IFS

if [ -d "/opt/ranger-yarn-plugin" ]; then
export HADOOP_CLASSPATH=${HADOOP_CLASSPATH}:/opt/ranger-yarn-plugin/lib/*
fi

if [ -d "/opt/tez" ]; then
export HADOOP_CLASSPATH=${HADOOP_CLASSPATH}:/etc/tez/conf:/opt/tez/*:/opt/tez/lib/*
fi

YARN_OPTS="$YARN_OPTS -Dhadoop.log.dir=$YARN_LOG_DIR"
YARN_OPTS="$YARN_OPTS -Dyarn.log.dir=$YARN_LOG_DIR"
YARN_OPTS="$YARN_OPTS -Dhadoop.log.file=$YARN_LOGFILE"
YARN_OPTS="$YARN_OPTS -Dyarn.log.file=$YARN_LOGFILE"
YARN_OPTS="$YARN_OPTS -Dyarn.home.dir=$YARN_COMMON_HOME"
YARN_OPTS="$YARN_OPTS -Dyarn.id.str=$YARN_IDENT_STRING"
YARN_OPTS="$YARN_OPTS -Dhadoop.root.logger=${YARN_ROOT_LOGGER:-INFO,console}"
YARN_OPTS="$YARN_OPTS -Dyarn.root.logger=${YARN_ROOT_LOGGER:-INFO,console}"
export YARN_NODEMANAGER_OPTS="$YARN_NODEMANAGER_OPTS -Dnm.audit.logger=INFO,NMAUDIT"
export YARN_RESOURCEMANAGER_OPTS="$YARN_RESOURCEMANAGER_OPTS -Drm.audit.logger=INFO,RMAUDIT"
if [ "x$JAVA_LIBRARY_PATH" != "x" ]; then
YARN_OPTS="$YARN_OPTS -Djava.library.path=$JAVA_LIBRARY_PATH"
fi
YARN_OPTS="$YARN_OPTS -Dyarn.policy.file=$YARN_POLICYFILE"
YARN_OPTS="$YARN_OPTS -Djava.io.tmpdir={{hadoop_java_io_tmpdir}}"

{% if rm_security_opts is defined %}
YARN_OPTS="{{rm_security_opts}} $YARN_OPTS"
{% endif %}
    </value>
    <value-attributes>
      <type>content</type>
    </value-attributes>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>service_check.queue.name</name>
    <value>default</value>
    <description>
      The queue that used by service check.
    </description>
    <depends-on>
      <property>
        <type>capacity-scheduler</type>
        <name>yarn.scheduler.capacity.root.queues</name>
      </property>
    </depends-on>
    <on-ambari-upgrade add="false"/>
  </property>
  <property>
    <name>yarn_cgroups_enabled</name>
    <value>true</value>
    <description>You can use CGroups to isolate CPU-heavy processes in a Hadoop cluster.</description>
    <display-name>CPU Isolation</display-name>
    <value-attributes>
      <type>value-list</type>
      <entries>
        <entry>
          <value>true</value>
          <label>Enabled</label>
        </entry>
        <entry>
          <value>false</value>
          <label>Disabled</label>
        </entry>
      </entries>
      <selection-cardinality>1</selection-cardinality>
    </value-attributes>
    <on-ambari-upgrade add="true"/>
  </property>
</configuration>
