#!/bin/bash
# Init script for logstash
# Maintained by Elasticsearch
# Generated by pleaserun.
# Implemented based on LSB Core 3.1:
# * Sections: 20.2, 20.3
#
### BEGIN INIT INFO
# Provides: logstash
# Required-Start: $remote_fs $syslog
# Required-Stop: $remote_fs $syslog
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description:
# Description: Starts Logstash as a daemon.
### END INIT INFO

if [ `id -u` -ne 0 ]; then
    echo "You need root privileges to run this script"
    exit 1
fi

name=logstash
pidfile="/var/run/logstash/$name.pid"

JAVACMD=/usr/bin/java
LS_HOME=/usr/share/logstash
LS_CONF_DIR=/etc/logstash
LS_OPTS="--path.settings ${LS_CONF_DIR}"
LS_JAVA_OPTS=""
LS_PIDFILE=/var/run/logstash/logstash.pid
LS_USER=logstash
LS_GROUP=logstash
LS_GC_LOG_FILE=/var/log/logstash/gc.log
LS_OPEN_FILES=16384
LS_NICE=19
SERVICE_NAME="logstash"
SERVICE_DESCRIPTION="logstash"
LS_LOG_FILE=/var/log/logstash
LS_LOG_DIR=/var/log/logstash

[ -r /etc/default/$name ] && . /etc/default/$name
[ -r /etc/sysconfig/$name ] && . /etc/sysconfig/$name

program=$LS_HOME/bin/logstash
args=" -f ${LS_CONF_DIR}/conf.d/*.conf -l ${LS_LOG_FILE} ${LS_OPTS}"

start() {

LS_JAVA_OPTS="${LS_JAVA_OPTS} -Djava.io.tmpdir=${LS_HOME}"
HOME=${LS_HOME}
export PATH HOME LS_HEAP_SIZE LS_JAVA_OPTS LS_USE_GC_LOGGING

SGROUPS=$(id -Gn "$LS_USER" | tr " " "," | sed 's/,$//'; echo '')

if [ ! -z $SGROUPS ]
then
EXTRA_GROUPS="--groups $SGROUPS"
fi

ulimit -n ${LS_OPEN_FILES}

nice -n ${LS_NICE} chroot --userspec $LS_USER:$LS_GROUP $EXTRA_GROUPS / sh -c "
cd $LS_HOME
ulimit -n ${LS_OPEN_FILES}
exec \"$program\" $args
" > "${LS_LOG_DIR}/$name.stdout" 2> "${LS_LOG_DIR}/$name.err" &

echo $! > $pidfile

echo "$name started."
return 0
}

stop() {
    # Try a few times to kill TERM the program
    if status ; then
        pid=`cat "$pidfile"`
        echo "Killing $name (pid $pid) with SIGTERM"
        kill -TERM $pid
        # Wait for it to exit.
        for i in 1 2 3 4 5 ; do
            echo "Waiting $name (pid $pid) to die..."
            status || break
            sleep 1
        done
        if status ; then
            if [ "$KILL_ON_STOP_TIMEOUT" -eq 1 ] ; then
                echo "Timeout reached. Killing $name (pid $pid) with SIGKILL. This may result in data loss."
                kill -KILL $pid
                echo "$name killed with SIGKILL."
            else
                echo "$name stop failed; still running."
            fi
        else
            echo "$name stopped."
        fi
    fi
}

status() {
    if [ -f "$pidfile" ] ; then
        pid=`cat "$pidfile"`
            if kill -0 $pid > /dev/null 2> /dev/null ; then
                return 0
            else
                return 2 # program is dead but pid file exists
            fi
    else
        return 3 # program is not running
    fi
}

force_stop() {
    if status ; then
        stop
        status && kill -KILL `cat "$pidfile"`
    fi
}


case "$1" in
    start)
        status
        code=$?
        if [ $code -eq 0 ]; then
            echo "$name is already running"
        else
            start
            code=$?
        fi
        exit $code
        ;;

    stop)
        stop
        ;;

    force-stop)
        force_stop
        ;;

    status)
        status
        code=$?
        if [ $code -eq 0 ] ; then
            echo "$name is running"
        else
            echo "$name is not running"
        fi
        exit $code
        ;;

    restart)
        stop && start
        ;;

    *)
        echo "Usage: $SCRIPTNAME {start|stop|force-stop|status|restart}" >&2
        exit 3
        ;;
    esac

exit $?