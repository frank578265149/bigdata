<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
<configuration supports_adding_forbidden="true">
  <property require-input="true">
    <name>download_url</name>
    <value>http://yum.example.com/hadoop/7/hadoop-3.0.0.tar.gz</value>
    <description>下载路径(只支持.tar.gz)</description>
  </property>
  <property require-input="true">
    <name>install_dir</name>
    <value>/opt/hadoop</value>
    <description>安装目录</description>
  </property>
  
  <property>
    <name>hdfs_log_dir_prefix</name>
    <value>/var/log/hadoop</value>
    <description>Hadoop Log Dir Prefix</description>
    <display-name>Hadoop Log Dir Prefix</display-name>
    <value-attributes>
      <type>directory</type>
      <overridable>false</overridable>
    </value-attributes>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>hadoop_pid_dir_prefix</name>
    <value>/var/run/hadoop</value>
    <display-name>Hadoop PID Dir Prefix</display-name>
    <description>Hadoop PID Dir Prefix</description>
    <value-attributes>
      <type>directory</type>
      <overridable>false</overridable>
      <editable-only-at-install>true</editable-only-at-install>
    </value-attributes>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>hadoop_root_logger</name>
    <value>INFO,RFA</value>
    <display-name>Hadoop Root Logger</display-name>
    <description>Hadoop Root Logger</description>
    <value-attributes>
      <overridable>false</overridable>
    </value-attributes>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>hadoop_heapsize</name>
    <value>1024</value>
    <description>Hadoop maximum Java heap size</description>
    <display-name>Hadoop maximum Java heap size</display-name>
    <value-attributes>
      <type>int</type>
      <unit>MB</unit>
      <overridable>false</overridable>
    </value-attributes>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>namenode_heapsize</name>
    <value>196608</value>
    <description>NameNode Java heap size</description>
    <display-name>NameNode Java heap size</display-name>
    <value-attributes>
      <type>int</type>
      <minimum>0</minimum>
      <maximum>268435456</maximum>
      <unit>MB</unit>
      <increment-step>256</increment-step>
      <overridable>false</overridable>
    </value-attributes>
    <depends-on>
      <property>
        <type>hdfs-site</type>
        <name>dfs.datanode.data.dir</name>
      </property>
    </depends-on>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>namenode_opt_newsize</name>
    <value>200</value>
    <description>Default size of Java new generation for NameNode (Java option -XX:NewSize) Note: The value of NameNode new generation size (default size of Java new generation for NameNode (Java option -XX:NewSize)) should be 1/8 of maximum heap size (-Xmx). Ensure that the value of the namenode_opt_newsize property is 1/8 the value of maximum heap size (-Xmx).</description>
    <display-name>NameNode new generation size</display-name>
    <depends-on>
      <property>
        <type>hadoop-env</type>
        <name>namenode_heapsize</name>
      </property>
    </depends-on>
    <value-attributes>
      <type>int</type>
      <minimum>0</minimum>
      <maximum>16384</maximum>
      <unit>MB</unit>
      <increment-step>256</increment-step>
      <overridable>false</overridable>
    </value-attributes>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>namenode_opt_maxnewsize</name>
    <value>200</value>
    <description>NameNode maximum new generation size</description>
    <display-name>NameNode maximum new generation size</display-name>
    <depends-on>
      <property>
        <type>hadoop-env</type>
        <name>namenode_heapsize</name>
      </property>
    </depends-on>
    <value-attributes>
      <type>int</type>
      <minimum>0</minimum>
      <maximum>16384</maximum>
      <unit>MB</unit>
      <increment-step>256</increment-step>
      <overridable>false</overridable>
    </value-attributes>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>namenode_opt_permsize</name>
    <value>128</value>
    <description>NameNode permanent generation size</description>
    <display-name>NameNode permanent generation size</display-name>
    <value-attributes>
      <type>int</type>
      <minimum>0</minimum>
      <maximum>2096</maximum>
      <unit>MB</unit>
      <increment-step>128</increment-step>
      <overridable>false</overridable>
    </value-attributes>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>namenode_opt_maxpermsize</name>
    <value>256</value>
    <description>NameNode maximum permanent generation size</description>
    <display-name>NameNode maximum permanent generation size</display-name>
    <value-attributes>
      <type>int</type>
      <minimum>0</minimum>
      <maximum>2096</maximum>
      <unit>MB</unit>
      <increment-step>128</increment-step>
      <overridable>false</overridable>
    </value-attributes>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>dtnode_heapsize</name>
    <value>4096</value>
    <description>DataNode maximum Java heap size</description>
    <display-name>DataNode maximum Java heap size</display-name>
    <value-attributes>
      <type>int</type>
      <minimum>0</minimum>
      <maximum>268435456</maximum>
      <unit>MB</unit>
      <increment-step>128</increment-step>
    </value-attributes>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>proxyuser_group</name>
    <display-name>Proxy User Group</display-name>
    <value>users</value>
    <property-type>GROUP</property-type>
    <description>Proxy user group.</description>
    <value-attributes>
      <type>user</type>
      <overridable>false</overridable>
    </value-attributes>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>hdfs_user</name>
    <display-name>HDFS User</display-name>
    <value>hdfs</value>
    <property-type>USER</property-type>
    <description>User to run HDFS as</description>
    <value-attributes>
      <type>user</type>
      <overridable>false</overridable>
    </value-attributes>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>hdfs_tmp_dir</name>
    <value>/tmp</value>
    <description>HDFS tmp Dir</description>
    <display-name>HDFS tmp Dir</display-name>
    <property-type>NOT_MANAGED_HDFS_PATH</property-type>
    <value-attributes>
      <read-only>true</read-only>
      <overridable>false</overridable>
      <visible>false</visible>
    </value-attributes>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>hdfs_user_nofile_limit</name>
    <value>1280000</value>
    <description>Max open files limit setting for HDFS user.</description>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>hdfs_user_nproc_limit</name>
    <value>65536</value>
    <description>Max number of processes limit setting for HDFS user.</description>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>namenode_backup_dir</name>
    <description>Local directory for storing backup copy of NameNode images during upgrade</description>
    <value>/tmp/upgrades</value>
    <on-ambari-upgrade add="false"/>
  </property>
  <property>
    <name>hdfs_user_keytab</name>
    <description>HDFS keytab path</description>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>hdfs_principal_name</name>
    <description>HDFS principal name</description>
    <property-type>KERBEROS_PRINCIPAL</property-type>
    <on-ambari-upgrade add="true"/>
  </property>

  <!-- hadoop-env.sh -->
  <property>
    <name>keyserver_host</name>
    <value> </value>
    <display-name>Key Server Host</display-name>
    <description>Hostnames where Key Management Server is installed</description>
    <value-attributes>
      <type>string</type>
    </value-attributes>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>keyserver_port</name>
    <value/>
    <display-name>Key Server Port</display-name>
    <description>Port number where Key Management Server is available</description>
    <value-attributes>
      <type>int</type>
      <empty-value-valid>true</empty-value-valid>
    </value-attributes>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>content</name>
    <display-name>hadoop-env template</display-name>
    <description>This is the jinja template for hadoop-env.sh file</description>
    <value>
      # Set Hadoop-specific environment variables here.

      # The only required environment variable is JAVA_HOME.  All others are
      # optional.  When running a distributed configuration it is best to
      # set JAVA_HOME in this file, so that it is correctly defined on
      # remote nodes.

      # The java implementation to use.  Required.
      export JAVA_HOME={{java_home}}
      export HADOOP_HOME_WARN_SUPPRESS=1

      export HADOOP_CONF_DIR=${HADOOP_CONF_DIR:-"/etc/hadoop"}
      ulimit -n 1280000
      # Hadoop home directory
      export HADOOP_HOME=${HADOOP_HOME:-{{hadoop_home}}}

      # Hadoop Configuration Directory

      # Path to jsvc required by secure datanode
      export JSVC_HOME=${HADOOP_HOME}/libexec

      # The maximum amount of heap to use, in MB. Default is 1000.
      export HADOOP_HEAPSIZE="{{hadoop_heapsize}}"

      export HADOOP_NAMENODE_INIT_HEAPSIZE="-Xms{{namenode_heapsize}}"

      # Extra Java runtime options.  Empty by default.
      export HADOOP_OPTS="-Djava.net.preferIPv4Stack=true ${HADOOP_OPTS}"

      # Command specific options appended to HADOOP_OPTS when specified
      HADOOP_JOBTRACKER_OPTS="-server -XX:ParallelGCThreads=8 -XX:+UseConcMarkSweepGC -XX:ErrorFile={{hdfs_log_dir_prefix}}/$USER/hs_err_pid%p.log -XX:NewSize={{jtnode_opt_newsize}} -XX:MaxNewSize={{jtnode_opt_maxnewsize}} -Xloggc:{{hdfs_log_dir_prefix}}/$USER/gc.log-`date +'%Y%m%d%H%M'` -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -Xmx{{jtnode_heapsize}} -Dhadoop.security.logger=INFO,DRFAS -Dmapred.audit.logger=INFO,MRAUDIT -Dhadoop.mapreduce.jobsummary.logger=INFO,JSA ${HADOOP_JOBTRACKER_OPTS}"

      HADOOP_TASKTRACKER_OPTS="-server -Xmx{{ttnode_heapsize}} -Dhadoop.security.logger=ERROR,console -Dmapred.audit.logger=ERROR,console ${HADOOP_TASKTRACKER_OPTS}"

      {% if java_version &lt; 8 %}
      export HADOOP_NAMENODE_OPTS="-server -XX:ParallelGCThreads=8 -XX:+UseConcMarkSweepGC -XX:ErrorFile={{hdfs_log_dir_prefix}}/$USER/hs_err_pid%p.log -XX:NewSize={{namenode_opt_newsize}} -XX:MaxNewSize={{namenode_opt_maxnewsize}} -XX:PermSize={{namenode_opt_permsize}} -XX:MaxPermSize={{namenode_opt_maxpermsize}} -Xloggc:{{hdfs_log_dir_prefix}}/$USER/gc.log-`date +'%Y%m%d%H%M'` -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:CMSInitiatingOccupancyFraction=70 -XX:+UseCMSInitiatingOccupancyOnly -Xms{{namenode_heapsize}} -Xmx{{namenode_heapsize}} -Dhadoop.security.logger=INFO,DRFAS -Dhdfs.audit.logger=INFO,DRFAAUDIT -Dnamenode.metrics.logger=INFO,NNMETRICSRFA -Dorg.mortbay.jetty.Request.maxFormContentSize=-1 ${HADOOP_NAMENODE_OPTS}"
      export HADOOP_DATANODE_OPTS="-server -XX:CMSInitiatingOccupancyFraction=70 -XX:+UseCMSInitiatingOccupancyOnly -XX:ParallelGCThreads=4 -XX:+UseConcMarkSweepGC -XX:ErrorFile=/var/log/hadoop/$USER/hs_err_pid%p.log -XX:NewSize=200m -XX:MaxNewSize=200m -XX:PermSize=128m -XX:MaxPermSize=256m -Xloggc:/var/log/hadoop/$USER/gc.log-`date +'%Y%m%d%H%M'` -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -Xms{{dtnode_heapsize}} -Xmx{{dtnode_heapsize}} -Dhadoop.security.logger=INFO,DRFAS -Dhdfs.audit.logger=INFO,DRFAAUDIT ${HADOOP_DATANODE_OPTS}"

      # The following applies to multiple commands (fs, dfs, fsck, distcp etc)
      export HADOOP_CLIENT_OPTS="-Xmx${HADOOP_HEAPSIZE}m -XX:MaxPermSize=512m $HADOOP_CLIENT_OPTS"

      {% else %}
      export HADOOP_NAMENODE_OPTS="-server -XX:ParallelGCThreads=8 -XX:+UseConcMarkSweepGC -XX:ErrorFile={{hdfs_log_dir_prefix}}/$USER/hs_err_pid%p.log -XX:NewSize={{namenode_opt_newsize}} -XX:MaxNewSize={{namenode_opt_maxnewsize}} -Xloggc:{{hdfs_log_dir_prefix}}/$USER/gc.log-`date +'%Y%m%d%H%M'` -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:CMSInitiatingOccupancyFraction=70 -XX:+UseCMSInitiatingOccupancyOnly -Xms{{namenode_heapsize}} -Xmx{{namenode_heapsize}} -Dhadoop.security.logger=INFO,DRFAS -Dhdfs.audit.logger=INFO,DRFAAUDIT -Dnamenode.metrics.logger=INFO,NNMETRICSRFA ${HADOOP_NAMENODE_OPTS} -Dorg.mortbay.jetty.Request.maxFormContentSize=-1"
      export HADOOP_DATANODE_OPTS="-server -XX:CMSInitiatingOccupancyFraction=70 -XX:+UseCMSInitiatingOccupancyOnly -XX:ParallelGCThreads=4 -XX:+UseConcMarkSweepGC -XX:ErrorFile=/var/log/hadoop/$USER/hs_err_pid%p.log -XX:NewSize=200m -XX:MaxNewSize=200m -Xloggc:/var/log/hadoop/$USER/gc.log-`date +'%Y%m%d%H%M'` -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -Xms{{dtnode_heapsize}} -Xmx{{dtnode_heapsize}} -Dhadoop.security.logger=INFO,DRFAS -Dhdfs.audit.logger=INFO,DRFAAUDIT ${HADOOP_DATANODE_OPTS}"

      # The following applies to multiple commands (fs, dfs, fsck, distcp etc)
      export HADOOP_CLIENT_OPTS="-Xmx${HADOOP_HEAPSIZE}m $HADOOP_CLIENT_OPTS"
      {% endif %}

      HADOOP_BALANCER_OPTS="-server -Xmx{{hadoop_heapsize}}m ${HADOOP_BALANCER_OPTS}"

      export HADOOP_SECONDARYNAMENODE_OPTS=$HADOOP_NAMENODE_OPTS

      # On secure datanodes, user to run the datanode as after dropping privileges
      export HADOOP_SECURE_DN_USER=${HADOOP_SECURE_DN_USER:-{{hadoop_secure_dn_user}}}

      # Extra ssh options.  Empty by default.
      export HADOOP_SSH_OPTS="-o ConnectTimeout=5 -o SendEnv=HADOOP_CONF_DIR"

      # Where log files are stored.  $HADOOP_HOME/logs by default.
      export HADOOP_LOG_DIR={{hdfs_log_dir_prefix}}/$USER

      # History server logs
      export HADOOP_MAPRED_LOG_DIR={{mapred_log_dir_prefix}}/$USER

      # Where log files are stored in the secure data environment.
      export HADOOP_SECURE_DN_LOG_DIR={{hdfs_log_dir_prefix}}/$HADOOP_SECURE_DN_USER

      # File naming remote slave hosts.  $HADOOP_HOME/conf/slaves by default.
      # export HADOOP_SLAVES=${HADOOP_HOME}/conf/slaves

      # host:path where hadoop code should be rsync'd from.  Unset by default.
      # export HADOOP_MASTER=master:/home/$USER/src/hadoop

      # Seconds to sleep between slave commands.  Unset by default.  This
      # can be useful in large clusters, where, e.g., slave rsyncs can
      # otherwise arrive faster than the master can service them.
      # export HADOOP_SLAVE_SLEEP=0.1

      # The directory where pid files are stored. /tmp by default.
      export HADOOP_PID_DIR={{hadoop_pid_dir_prefix}}/$USER
      export HADOOP_SECURE_DN_PID_DIR={{hadoop_pid_dir_prefix}}/$HADOOP_SECURE_DN_USER

      # History server pid
      export HADOOP_MAPRED_PID_DIR={{mapred_pid_dir_prefix}}/$USER

      YARN_RESOURCEMANAGER_OPTS="-Dyarn.server.resourcemanager.appsummary.logger=INFO,RMSUMMARY"

      # A string representing this instance of hadoop. $USER by default.
      export HADOOP_IDENT_STRING=$USER

      # The scheduling priority for daemon processes.  See 'man nice'.

      # export HADOOP_NICENESS=10

      # Add database libraries
      JAVA_JDBC_LIBS=""
      if [ -d "/usr/share/java" ]; then
      for jarFile in `ls /usr/share/java | grep -E "(mysql|ojdbc|postgresql|sqljdbc)" 2&gt;/dev/null`
      do
      JAVA_JDBC_LIBS=${JAVA_JDBC_LIBS}:$jarFile
      done
      fi

      # Add libraries required by nodemanager
      MAPREDUCE_LIBS={{mapreduce_libs_path}}

      # Add libraries to the hadoop classpath - some may not need a colon as they already include it
      export HADOOP_CLASSPATH=${HADOOP_CLASSPATH}${JAVA_JDBC_LIBS}:${MAPREDUCE_LIBS}

      if [ -d "/opt/ranger-hdfs-plugin" ]; then
        export HADOOP_CLASSPATH=${HADOOP_CLASSPATH}:/opt/ranger-hdfs-plugin/lib/*
      fi

      if [ -d "/opt/tez" ]; then
        export HADOOP_CLASSPATH=${HADOOP_CLASSPATH}:/etc/tez/conf:/opt/tez/*:/opt/tez/lib/*
      fi

      # Setting path to hdfs command line
      export HADOOP_LIBEXEC_DIR={{hadoop_libexec_dir}}

      # Mostly required for hadoop 2.0
      export JAVA_LIBRARY_PATH=${JAVA_LIBRARY_PATH}:/opt/hadoop/lib/native:/usr/lib64

      export HADOOP_OPTS=" $HADOOP_OPTS"

      {% if is_datanode_max_locked_memory_set %}
      # Fix temporary bug, when ulimit from conf files is not picked up, without full relogin.
      # Makes sense to fix only when runing DN as root
      if [ "$command" == "datanode" ] &amp;&amp; [ "$EUID" -eq 0 ] &amp;&amp; [ -n "$HADOOP_SECURE_DN_USER" ]; then
      ulimit -l {{datanode_max_locked_memory}}
      ulimit -n 128000
      fi
      {% endif %}

      # Enable ACLs on zookeper znodes if required
      {% if hadoop_zkfc_opts is defined %}
      export HADOOP_ZKFC_OPTS="{{hadoop_zkfc_opts}} $HADOOP_ZKFC_OPTS"
      {% endif %}
    </value>
    <value-attributes>
      <type>content</type>
    </value-attributes>
    <on-ambari-upgrade add="true"/>
  </property>
</configuration>
